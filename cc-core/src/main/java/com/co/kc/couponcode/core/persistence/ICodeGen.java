package com.co.kc.couponcode.core.persistence;

import com.co.kc.couponcode.core.model.ICode;
import com.co.kc.couponcode.core.model.IFactor;

/**
 * The class ICodeGen is used to store the state of LCG. Specifically,
 * <li>It needs to initialize the parameter of LCG, such as `no`, `multiplier`, `addend`, `modulo`, `x0`, `xn`,
 * save the parameter of LCG mentioned above, and use the parameter of LCG exclusively.</li>
 * <li>It needs to terminate the occupation of the parameter, in order to give another active generator to use.
 * As well as, it must mark the parameter of LCG is not available, if it uses up code generated by LCG with the parameter.</li>
 * <li>It needs to select the parameter of LCG, when it uses up code generated by LCG with previous parameter.
 *
 * @author kc
 */
public interface ICodeGen {

    /**
     * Initialize the state of code generator.
     * <p>
     * Typically, this method needs to initialize the parameter of LCG, such as `no`, `multiplier`, `addend`, `modulo`, `x0`, `xn`,
     * save the parameter of LCG mentioned above, and use the parameter of LCG exclusively.
     *
     * @return the result of initializing
     */
    boolean init();

    /**
     * Destroy the state of code generator.
     * <p>
     * Typically, this method needs to terminate the occupation of the parameter,
     * in order to give another active generator to use. As well as, it must mark
     * the parameter of LCG is not available, if it uses up code generated by LCG with the parameter.
     *
     * @return the result of destroying
     */
    boolean destroy();

    /**
     * Select the state of code generator.
     * <p>
     * Typically, this method needs to select the parameter of LCG,
     * when it uses up code generated by LCG with previous parameter.
     *
     * @return the result of Refreshing
     */
    boolean select();

    /**
     * Get the factor of LCG
     *
     * @return the factor of LCG
     */
    IFactor getFactor();

    /**
     * Get the unique serial number.
     *
     * @return The unique serial number
     */
    Long getNo();

    /**
     * Get the first code X0.
     *
     * @return The first code X0, return null if not exist
     */
    ICode getX0();

    /**
     * Get the last code Xn.
     *
     * @return The last code Xn, return null if not exist
     */
    ICode getXn();

    /**
     * Flush the last code Xn and the amount of generated code.
     *
     * @param no    the no
     * @param xn    the last code Xn
     * @param delta the amount of generated code.
     * @return the result of flushing
     */
    boolean flush(Long no, ICode xn, Long delta);

    /**
     * Keep the heartbeat
     * <p>
     * Typically, this method can let the program check if the parameter of LCG is occupied.
     *
     * @return the result of keeping
     */
    boolean keepHeartbeat();

}
